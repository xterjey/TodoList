{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst defaultTasks = [];\nconst getSavedDirectories = () => {\n  let dirList = [];\n  if (localStorage.getItem(\"directories\")) {\n    dirList = JSON.parse(localStorage.getItem(\"directories\"));\n    const mainDirExists = dirList.some(dir => dir === \"Main\");\n    if (!mainDirExists) {\n      dirList.push(\"Main\");\n    }\n  } else {\n    dirList.push(\"Main\");\n  }\n  if (localStorage.getItem(\"tasks\")) {\n    const savedTasksList = JSON.parse(localStorage.getItem(\"tasks\"));\n    let dirNotSaved = [];\n    savedTasksList.forEach(task => {\n      if (!dirList.includes(task.dir)) {\n        if (!dirNotSaved.includes(task.dir)) {\n          dirNotSaved.push(task.dir);\n        }\n      }\n    });\n    dirList = [...dirList, ...dirNotSaved];\n  }\n  return dirList;\n};\nconst initialState = {\n  tasks: localStorage.getItem(\"tasks\") ? JSON.parse(localStorage.getItem(\"tasks\")) : defaultTasks,\n  directories: getSavedDirectories()\n};\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState: initialState,\n  reducers: {\n    addNewTask(state, action) {\n      state.tasks = [action.payload, ...state.tasks];\n    },\n    removeTask(state, action) {\n      const newTasksList = state.tasks.filter(task => task.id !== action.payload);\n      state.tasks = newTasksList;\n    },\n    markAsImportant(state, action) {\n      const newTaskFavorited = state.tasks.find(task => task.id === action.payload);\n      newTaskFavorited.important = !newTaskFavorited.important;\n    },\n    editTask(state, action) {\n      const taskId = action.payload.id;\n      const newTaskEdited = state.tasks.find(task => task.id === taskId);\n      const indexTask = state.tasks.indexOf(newTaskEdited);\n      state.tasks[indexTask] = action.payload;\n    },\n    toggleTaskCompleted(state, action) {\n      const taskId = action.payload;\n      const currTask = state.tasks.find(task => task.id === taskId);\n      currTask.completed = !currTask.completed;\n    },\n    deleteAllData(state) {\n      state.tasks = [];\n      state.directories = [\"Main\"];\n    },\n    createDirectory(state, action) {\n      const newDirectory = action.payload;\n      const directoryAlreadyExists = state.directories.includes(newDirectory);\n      if (directoryAlreadyExists) return;\n      state.directories = [newDirectory, ...state.directories];\n    },\n    deleteDirectory(state, action) {\n      const dirName = action.payload;\n      state.directories = state.directories.filter(dir => dir !== dirName);\n      state.tasks = state.tasks.filter(task => task.dir !== dirName);\n    },\n    editDirectoryName(state, action) {\n      const newDirName = action.payload.newDirName;\n      const previousDirName = action.payload.previousDirName;\n      const directoryAlreadyExists = state.directories.includes(newDirName);\n      if (directoryAlreadyExists) return;\n      const dirIndex = state.directories.indexOf(previousDirName);\n      state.directories[dirIndex] = newDirName;\n      state.tasks.forEach(task => {\n        if (task.dir === previousDirName) {\n          task.dir = newDirName;\n        }\n      });\n    }\n  }\n});\nexport const tasksActions = tasksSlice.actions;\nexport default tasksSlice.reducer;\nexport const tasksMiddleware = store => next => action => {\n  const nextAction = next(action);\n  const actionChangeOnlyDirectories = tasksActions.createDirectory.match(action);\n  const isADirectoryAction = action.type.toLowerCase().includes(\"directory\");\n  if (action.type.startsWith(\"tasks/\") && !actionChangeOnlyDirectories) {\n    const tasksList = store.getState().tasks.tasks;\n    localStorage.setItem(\"tasks\", JSON.stringify(tasksList));\n  }\n  if (action.type.startsWith(\"tasks/\") && isADirectoryAction) {\n    const dirList = store.getState().tasks.directories;\n    localStorage.setItem(\"directories\", JSON.stringify(dirList));\n  }\n  if (tasksActions.deleteAllData.match(action)) {\n    localStorage.removeItem(\"tasks\");\n    localStorage.removeItem(\"directories\");\n    localStorage.removeItem(\"darkmode\");\n  }\n  if (tasksActions.removeTask.match(action)) {\n    console.log(JSON.parse(localStorage.getItem(\"tasks\")));\n    if (localStorage.getItem(\"tasks\")) {\n      const localStorageTasks = JSON.parse(localStorage.getItem(\"tasks\"));\n      if (localStorageTasks.length === 0) {\n        localStorage.removeItem(\"tasks\");\n      }\n    }\n  }\n  return nextAction;\n};","map":{"version":3,"names":["createSlice","defaultTasks","getSavedDirectories","dirList","localStorage","getItem","JSON","parse","mainDirExists","some","dir","push","savedTasksList","dirNotSaved","forEach","task","includes","initialState","tasks","directories","tasksSlice","name","reducers","addNewTask","state","action","payload","removeTask","newTasksList","filter","id","markAsImportant","newTaskFavorited","find","important","editTask","taskId","newTaskEdited","indexTask","indexOf","toggleTaskCompleted","currTask","completed","deleteAllData","createDirectory","newDirectory","directoryAlreadyExists","deleteDirectory","dirName","editDirectoryName","newDirName","previousDirName","dirIndex","tasksActions","actions","reducer","tasksMiddleware","store","next","nextAction","actionChangeOnlyDirectories","match","isADirectoryAction","type","toLowerCase","startsWith","tasksList","getState","setItem","stringify","removeItem","console","log","localStorageTasks","length"],"sources":["/home/jayourbae/ToDo-app/src/store/Tasks.store.tsx"],"sourcesContent":["import {\n  Action,\n  createSlice,\n  Dispatch,\n  MiddlewareAPI,\n  PayloadAction,\n} from \"@reduxjs/toolkit\";\nimport { Task } from \"../interfaces\";\n\nconst defaultTasks: Task[] = [\n\n];\n\nconst getSavedDirectories = (): string[] => {\n  let dirList: string[] = [];\n  if (localStorage.getItem(\"directories\")) {\n    dirList = JSON.parse(localStorage.getItem(\"directories\")!);\n    const mainDirExists = dirList.some((dir: string) => dir === \"Main\");\n    if (!mainDirExists) {\n      dirList.push(\"Main\");\n    }\n  } else {\n    dirList.push(\"Main\");\n  }\n\n  if (localStorage.getItem(\"tasks\")) {\n    const savedTasksList = JSON.parse(localStorage.getItem(\"tasks\")!);\n    let dirNotSaved: string[] = [];\n    savedTasksList.forEach((task: Task) => {\n      if (!dirList.includes(task.dir)) {\n        if (!dirNotSaved.includes(task.dir)) {\n          dirNotSaved.push(task.dir);\n        }\n      }\n    });\n    dirList = [...dirList, ...dirNotSaved];\n  }\n  return dirList;\n};\n\nconst initialState: {\n  tasks: Task[];\n  directories: string[];\n} = {\n  tasks: localStorage.getItem(\"tasks\")\n    ? JSON.parse(localStorage.getItem(\"tasks\")!)\n    : defaultTasks,\n  directories: getSavedDirectories(),\n};\n\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState: initialState,\n  reducers: {\n    addNewTask(state, action: PayloadAction<Task>) {\n      state.tasks = [action.payload, ...state.tasks];\n    },\n    removeTask(state, action) {\n      const newTasksList = state.tasks.filter(\n        (task) => task.id !== action.payload\n      );\n      state.tasks = newTasksList;\n    },\n    markAsImportant(state, action: PayloadAction<string>) {\n      const newTaskFavorited = state.tasks.find(\n        (task) => task.id === action.payload\n      );\n      newTaskFavorited!.important = !newTaskFavorited!.important;\n    },\n    editTask(state, action: PayloadAction<Task>) {\n      const taskId = action.payload.id;\n\n      const newTaskEdited: Task = state.tasks.find(\n        (task: Task) => task.id === taskId\n      )!;\n      const indexTask = state.tasks.indexOf(newTaskEdited);\n      state.tasks[indexTask] = action.payload;\n    },\n    toggleTaskCompleted(state, action: PayloadAction<string>) {\n      const taskId = action.payload;\n\n      const currTask = state.tasks.find((task) => task.id === taskId)!;\n\n      currTask.completed = !currTask.completed;\n    },\n    deleteAllData(state) {\n      state.tasks = [];\n      state.directories = [\"Main\"];\n    },\n    createDirectory(state, action: PayloadAction<string>) {\n      const newDirectory: string = action.payload;\n      const directoryAlreadyExists = state.directories.includes(newDirectory);\n      if (directoryAlreadyExists) return;\n      state.directories = [newDirectory, ...state.directories];\n    },\n    deleteDirectory(state, action: PayloadAction<string>) {\n      const dirName = action.payload;\n\n      state.directories = state.directories.filter((dir) => dir !== dirName);\n      state.tasks = state.tasks.filter((task) => task.dir !== dirName);\n    },\n    editDirectoryName(\n      state,\n      action: PayloadAction<{ newDirName: string; previousDirName: string }>\n    ) {\n      const newDirName: string = action.payload.newDirName;\n      const previousDirName: string = action.payload.previousDirName;\n      const directoryAlreadyExists = state.directories.includes(newDirName);\n      if (directoryAlreadyExists) return;\n\n      const dirIndex = state.directories.indexOf(previousDirName);\n\n      state.directories[dirIndex] = newDirName;\n      state.tasks.forEach((task) => {\n        if (task.dir === previousDirName) {\n          task.dir = newDirName;\n        }\n      });\n    },\n  },\n});\n\nexport const tasksActions = tasksSlice.actions;\nexport default tasksSlice.reducer;\n\nexport const tasksMiddleware =\n  (store: MiddlewareAPI) => (next: Dispatch) => (action: Action) => {\n    const nextAction = next(action);\n    const actionChangeOnlyDirectories =\n      tasksActions.createDirectory.match(action);\n\n    const isADirectoryAction: boolean = action.type\n      .toLowerCase()\n      .includes(\"directory\");\n\n    if (action.type.startsWith(\"tasks/\") && !actionChangeOnlyDirectories) {\n      const tasksList = store.getState().tasks.tasks;\n      localStorage.setItem(\"tasks\", JSON.stringify(tasksList));\n    }\n    if (action.type.startsWith(\"tasks/\") && isADirectoryAction) {\n      const dirList = store.getState().tasks.directories;\n      localStorage.setItem(\"directories\", JSON.stringify(dirList));\n    }\n\n    if (tasksActions.deleteAllData.match(action)) {\n      localStorage.removeItem(\"tasks\");\n      localStorage.removeItem(\"directories\");\n      localStorage.removeItem(\"darkmode\");\n    }\n\n    if (tasksActions.removeTask.match(action)) {\n      console.log(JSON.parse(localStorage.getItem(\"tasks\")!));\n      if (localStorage.getItem(\"tasks\")) {\n        const localStorageTasks = JSON.parse(localStorage.getItem(\"tasks\")!);\n        if (localStorageTasks.length === 0) {\n          localStorage.removeItem(\"tasks\");\n        }\n      }\n    }\n    return nextAction;\n  };\n"],"mappings":"AAAA,SAEEA,WAAW,QAIN,kBAAkB;AAGzB,MAAMC,YAAoB,GAAG,EAE5B;AAED,MAAMC,mBAAmB,GAAG,MAAgB;EAC1C,IAAIC,OAAiB,GAAG,EAAE;EAC1B,IAAIC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,EAAE;IACvCF,OAAO,GAAGG,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAE;IAC1D,MAAMG,aAAa,GAAGL,OAAO,CAACM,IAAI,CAAEC,GAAW,IAAKA,GAAG,KAAK,MAAM,CAAC;IACnE,IAAI,CAACF,aAAa,EAAE;MAClBL,OAAO,CAACQ,IAAI,CAAC,MAAM,CAAC;IACtB;EACF,CAAC,MAAM;IACLR,OAAO,CAACQ,IAAI,CAAC,MAAM,CAAC;EACtB;EAEA,IAAIP,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;IACjC,MAAMO,cAAc,GAAGN,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAE;IACjE,IAAIQ,WAAqB,GAAG,EAAE;IAC9BD,cAAc,CAACE,OAAO,CAAEC,IAAU,IAAK;MACrC,IAAI,CAACZ,OAAO,CAACa,QAAQ,CAACD,IAAI,CAACL,GAAG,CAAC,EAAE;QAC/B,IAAI,CAACG,WAAW,CAACG,QAAQ,CAACD,IAAI,CAACL,GAAG,CAAC,EAAE;UACnCG,WAAW,CAACF,IAAI,CAACI,IAAI,CAACL,GAAG,CAAC;QAC5B;MACF;IACF,CAAC,CAAC;IACFP,OAAO,GAAG,CAAC,GAAGA,OAAO,EAAE,GAAGU,WAAW,CAAC;EACxC;EACA,OAAOV,OAAO;AAChB,CAAC;AAED,MAAMc,YAGL,GAAG;EACFC,KAAK,EAAEd,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,GAChCC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAE,GAC1CJ,YAAY;EAChBkB,WAAW,EAAEjB,mBAAmB;AAClC,CAAC;AAED,MAAMkB,UAAU,GAAGpB,WAAW,CAAC;EAC7BqB,IAAI,EAAE,OAAO;EACbJ,YAAY,EAAEA,YAAY;EAC1BK,QAAQ,EAAE;IACRC,UAAU,CAACC,KAAK,EAAEC,MAA2B,EAAE;MAC7CD,KAAK,CAACN,KAAK,GAAG,CAACO,MAAM,CAACC,OAAO,EAAE,GAAGF,KAAK,CAACN,KAAK,CAAC;IAChD,CAAC;IACDS,UAAU,CAACH,KAAK,EAAEC,MAAM,EAAE;MACxB,MAAMG,YAAY,GAAGJ,KAAK,CAACN,KAAK,CAACW,MAAM,CACpCd,IAAI,IAAKA,IAAI,CAACe,EAAE,KAAKL,MAAM,CAACC,OAAO,CACrC;MACDF,KAAK,CAACN,KAAK,GAAGU,YAAY;IAC5B,CAAC;IACDG,eAAe,CAACP,KAAK,EAAEC,MAA6B,EAAE;MACpD,MAAMO,gBAAgB,GAAGR,KAAK,CAACN,KAAK,CAACe,IAAI,CACtClB,IAAI,IAAKA,IAAI,CAACe,EAAE,KAAKL,MAAM,CAACC,OAAO,CACrC;MACDM,gBAAgB,CAAEE,SAAS,GAAG,CAACF,gBAAgB,CAAEE,SAAS;IAC5D,CAAC;IACDC,QAAQ,CAACX,KAAK,EAAEC,MAA2B,EAAE;MAC3C,MAAMW,MAAM,GAAGX,MAAM,CAACC,OAAO,CAACI,EAAE;MAEhC,MAAMO,aAAmB,GAAGb,KAAK,CAACN,KAAK,CAACe,IAAI,CACzClB,IAAU,IAAKA,IAAI,CAACe,EAAE,KAAKM,MAAM,CAClC;MACF,MAAME,SAAS,GAAGd,KAAK,CAACN,KAAK,CAACqB,OAAO,CAACF,aAAa,CAAC;MACpDb,KAAK,CAACN,KAAK,CAACoB,SAAS,CAAC,GAAGb,MAAM,CAACC,OAAO;IACzC,CAAC;IACDc,mBAAmB,CAAChB,KAAK,EAAEC,MAA6B,EAAE;MACxD,MAAMW,MAAM,GAAGX,MAAM,CAACC,OAAO;MAE7B,MAAMe,QAAQ,GAAGjB,KAAK,CAACN,KAAK,CAACe,IAAI,CAAElB,IAAI,IAAKA,IAAI,CAACe,EAAE,KAAKM,MAAM,CAAE;MAEhEK,QAAQ,CAACC,SAAS,GAAG,CAACD,QAAQ,CAACC,SAAS;IAC1C,CAAC;IACDC,aAAa,CAACnB,KAAK,EAAE;MACnBA,KAAK,CAACN,KAAK,GAAG,EAAE;MAChBM,KAAK,CAACL,WAAW,GAAG,CAAC,MAAM,CAAC;IAC9B,CAAC;IACDyB,eAAe,CAACpB,KAAK,EAAEC,MAA6B,EAAE;MACpD,MAAMoB,YAAoB,GAAGpB,MAAM,CAACC,OAAO;MAC3C,MAAMoB,sBAAsB,GAAGtB,KAAK,CAACL,WAAW,CAACH,QAAQ,CAAC6B,YAAY,CAAC;MACvE,IAAIC,sBAAsB,EAAE;MAC5BtB,KAAK,CAACL,WAAW,GAAG,CAAC0B,YAAY,EAAE,GAAGrB,KAAK,CAACL,WAAW,CAAC;IAC1D,CAAC;IACD4B,eAAe,CAACvB,KAAK,EAAEC,MAA6B,EAAE;MACpD,MAAMuB,OAAO,GAAGvB,MAAM,CAACC,OAAO;MAE9BF,KAAK,CAACL,WAAW,GAAGK,KAAK,CAACL,WAAW,CAACU,MAAM,CAAEnB,GAAG,IAAKA,GAAG,KAAKsC,OAAO,CAAC;MACtExB,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACW,MAAM,CAAEd,IAAI,IAAKA,IAAI,CAACL,GAAG,KAAKsC,OAAO,CAAC;IAClE,CAAC;IACDC,iBAAiB,CACfzB,KAAK,EACLC,MAAsE,EACtE;MACA,MAAMyB,UAAkB,GAAGzB,MAAM,CAACC,OAAO,CAACwB,UAAU;MACpD,MAAMC,eAAuB,GAAG1B,MAAM,CAACC,OAAO,CAACyB,eAAe;MAC9D,MAAML,sBAAsB,GAAGtB,KAAK,CAACL,WAAW,CAACH,QAAQ,CAACkC,UAAU,CAAC;MACrE,IAAIJ,sBAAsB,EAAE;MAE5B,MAAMM,QAAQ,GAAG5B,KAAK,CAACL,WAAW,CAACoB,OAAO,CAACY,eAAe,CAAC;MAE3D3B,KAAK,CAACL,WAAW,CAACiC,QAAQ,CAAC,GAAGF,UAAU;MACxC1B,KAAK,CAACN,KAAK,CAACJ,OAAO,CAAEC,IAAI,IAAK;QAC5B,IAAIA,IAAI,CAACL,GAAG,KAAKyC,eAAe,EAAE;UAChCpC,IAAI,CAACL,GAAG,GAAGwC,UAAU;QACvB;MACF,CAAC,CAAC;IACJ;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMG,YAAY,GAAGjC,UAAU,CAACkC,OAAO;AAC9C,eAAelC,UAAU,CAACmC,OAAO;AAEjC,OAAO,MAAMC,eAAe,GACzBC,KAAoB,IAAMC,IAAc,IAAMjC,MAAc,IAAK;EAChE,MAAMkC,UAAU,GAAGD,IAAI,CAACjC,MAAM,CAAC;EAC/B,MAAMmC,2BAA2B,GAC/BP,YAAY,CAACT,eAAe,CAACiB,KAAK,CAACpC,MAAM,CAAC;EAE5C,MAAMqC,kBAA2B,GAAGrC,MAAM,CAACsC,IAAI,CAC5CC,WAAW,EAAE,CACbhD,QAAQ,CAAC,WAAW,CAAC;EAExB,IAAIS,MAAM,CAACsC,IAAI,CAACE,UAAU,CAAC,QAAQ,CAAC,IAAI,CAACL,2BAA2B,EAAE;IACpE,MAAMM,SAAS,GAAGT,KAAK,CAACU,QAAQ,EAAE,CAACjD,KAAK,CAACA,KAAK;IAC9Cd,YAAY,CAACgE,OAAO,CAAC,OAAO,EAAE9D,IAAI,CAAC+D,SAAS,CAACH,SAAS,CAAC,CAAC;EAC1D;EACA,IAAIzC,MAAM,CAACsC,IAAI,CAACE,UAAU,CAAC,QAAQ,CAAC,IAAIH,kBAAkB,EAAE;IAC1D,MAAM3D,OAAO,GAAGsD,KAAK,CAACU,QAAQ,EAAE,CAACjD,KAAK,CAACC,WAAW;IAClDf,YAAY,CAACgE,OAAO,CAAC,aAAa,EAAE9D,IAAI,CAAC+D,SAAS,CAAClE,OAAO,CAAC,CAAC;EAC9D;EAEA,IAAIkD,YAAY,CAACV,aAAa,CAACkB,KAAK,CAACpC,MAAM,CAAC,EAAE;IAC5CrB,YAAY,CAACkE,UAAU,CAAC,OAAO,CAAC;IAChClE,YAAY,CAACkE,UAAU,CAAC,aAAa,CAAC;IACtClE,YAAY,CAACkE,UAAU,CAAC,UAAU,CAAC;EACrC;EAEA,IAAIjB,YAAY,CAAC1B,UAAU,CAACkC,KAAK,CAACpC,MAAM,CAAC,EAAE;IACzC8C,OAAO,CAACC,GAAG,CAAClE,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAE,CAAC;IACvD,IAAID,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;MACjC,MAAMoE,iBAAiB,GAAGnE,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAE;MACpE,IAAIoE,iBAAiB,CAACC,MAAM,KAAK,CAAC,EAAE;QAClCtE,YAAY,CAACkE,UAAU,CAAC,OAAO,CAAC;MAClC;IACF;EACF;EACA,OAAOX,UAAU;AACnB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}